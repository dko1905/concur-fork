
progress bar

flags
 output type, default json
 timeout
 num procs, 0 for infinite. default 128.  some flag to also say "num-cpus" somehow, or "num-cores".
  runtime.NumCPU()

* can I just add flags and args to a context?  is that what they're for?


next:
  focus on output formatting and cleanup
  reorg infra.go to smaller functions?
  and how the hell do I test this?



how to test

a lot of it revolves around
./concur "ping -c 1 {{1}}" www.mit.eud www.ucla.edu cloud.notcom.com  -t 2 -c 128

with a deliberate misspelling
and varying --any/--first -c 1-3, cpu, 1x, 2x.  
checking for ...stuff?  as much as I can I guess.
it'd be best if I can grab the json and scrape through it rather than testscripts


call Do and it returns a CommandMap of Command structs.
do lots of testing on that because it's easy to parse.
maybe call reportDone with the output of Do to get json?


do a little e2e testing to make sure the json comes out ok but don't sweat it.

and I can do all this in parallel when I call sleep (/bin/sleep if needed)

maybe instead of ping use 'sleep'?
  concur "sleep {{1}}" 1 2 3
   ^ works but always returns pid0=1sec, 1=2sec, 2=3sec. seems fine tho.

make this work: ./concur "ping {{1}}" "-c 1 www.mit.eud" 



huh

ok I need to think through flow here.  
right now it's a mess.


root.init() 
	cleans up flags

root.ConcurCmdE()
	calls PopulateFlags()
	calls infra.Do()


infra.Do()
	does the heavy lifting - calls out to command loop, prints stuff, etc.
	returns (??)


what I should have instead



clean up flags, including populate
Do()
	...
  dunno.

well, what do I want out of this?

build sane args structure
get back commandlist or commandmap or something data-structure-y
  ^ test up to this point.
print it out

ConcurCmdE
  clean up args
  PrintOut(Do(args))

Do(args) returns a cmdmap, fully populated
PrintOut just displays the json

then test by calling Do(args)
and a testscript that calls a slightly wrapped PrintOut()

return list of hosts to user in order, fastest first.
problem is they're keyed in a dict.
sort values then add in that order? yeah, I think so
  they're all sorted by id or random or whatever.
  assemble all results into a list
  sort that list with a cutom sort function
  assign ordinal to each one
  put them in the return dict where key is speed lowest ranking, val is the output
spit out order in the metadata section?

progress bar which tracks --timeout?  --pbar {jobs|time} maybe?